openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a project about cloning Twitter
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:3000
tags:
  - name: users
    description: Các API liên quan đến người dùng twitter
  - name: tweets
    description: Các API liên quan đến tweet
  - name: bookmarks
    description: Các API liên quan đến bookmark
  - name: likes
    description: Các API liên quan đến like
  - name: conversations
    description: Các API liên quan đến conversation
  - name: medias
    description: Các API liên quan đến media
paths:
  /users/register:
    post:
      tags:
        - users
      summary: Đăng ký
      description: Đăng ký tài khoản X
      operationId: register
      requestBody:
        description: Thông tin đăng ký
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterBody'
        required: true
      responses:
        '200':
          description: Đăng ký thành công
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Register successfully
                  result:
                    $ref: '#/components/schemas/SuccessAuthentication'
        '422':
          description: Invalid input
  /users/login:
    post:
      tags:
        - users
      summary: Đăng nhập
      description: Đăng nhập vào hệ thống X
      operationId: login
      requestBody:
        description: Thông tin đăng nhập
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginBody'
        required: true
      responses:
        '200':
          description: Đăng nhập thành công
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successfully
                  result:
                    $ref: '#/components/schemas/SuccessAuthentication'
        '422':
          description: Invalid input
  /users/me:
    get:
      tags:
        - users
      summary: Lấy thông tin user
      description: Lấy thông tin user
      operationId: getMe
      security:
        - BearerAuth: []
      responses:
        default:
          description: Lấy thông tin user thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/logout:
    post:
      tags:
        - users
      summary: Đăng xuất
      description: Đăng xuất khỏi hệ thống
      operationId: logout
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Đăng xuất thành công
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logout successfully
        '401':
          description: Unauthorized
components:
  schemas:
    RegisterBody:
      type: object
      properties:
        email:
          type: string
          example: meoweird@gmail.com
        password:
          type: string
          example: Dong2003!
        confirm_password:
          type: string
          example: Dong2003!
        date_of_birth:
          type: string
          format: ISO8601
          example: 2023-06-08T10:17:31.096Z
        name:
          type: string
          example: Le Xuan Dong
    LoginBody:
      type: object
      properties:
        email:
          type: string
          example: meoweird@gmail.com
        password:
          type: string
          example: Dong2003!
    SuccessAuthentication:
      type: object
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjRiZTBhZDJlNDNkMjQ2NDM5NGZlZWRiIiwidG9rZW5fdHlwZSI6MCwidmVyaWZ5IjoxLCJpYXQiOjE2OTEzODMyMjYsImV4cCI6MTY5MTQ2OTYyNn0.HTLX20cB7_z0c9c8FDg3MIx6RJEELHHlmJNZa94ku-o
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjRiZTBhZDJlNDNkMjQ2NDM5NGZlZWRiIiwidG9rZW5fdHlwZSI6MSwidmVyaWZ5IjoxLCJpYXQiOjE2OTEzODMyMjYsImV4cCI6MTcwMDAyMzIyNn0.bFnaBfxWl-Q48HCwAeMpNzZwTO9LEjcBd7Zyipjqr64
    User:
      type: object
      properties:
        _id:
          type: string
          format: MongoId
          example: 64be0ad2e43d2464394feedb
        name:
          type: string
          example: Le Xuan Dong
        email:
          type: string
          example: meoweird@gmail.com
        date_of_birth:
          type: string
          format: ISO8601
          example: 2023-06-08T10:17:31.096Z
        created_at:
          type: string
          format: ISO8601
          example: 2023-03-08T12:00:00Z
        updated_at:
          type: string
          format: ISO8601
          example: 2023-03-08T12:00:00Z
        verify:
          $ref: '#/components/schemas/UserVerifyStatus'
        twitter_circle:
          type: array
          items:
            type: string
            format: MongoId
          example: ['64be0ad2e43d2464394feedb', '64be0ad2e43d2464394feedc']
        bio:
          type: string
          example: 'This is my bio.'
        location:
          type: string
          example: 'San Francisco, CA'
        website:
          type: string
          example: 'www.example.com'
        username:
          type: string
          example: 'lexuandong'
        avatar:
          type: string
          example: 'http:localhost:4000/images/avatars/lexuandong.jpg'
        cover_photo:
          type: string
          example: 'http:localhost:4000/images/avatars/lexuandong.jpg'
    UserVerifyStatus:
      type: number
      enum: [Unverified, Verified, Banned]
      example: 1
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
